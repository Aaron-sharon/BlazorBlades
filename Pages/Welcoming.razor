@inject NavigationManager Navigation
@inject HttpClient Http
@inject IDialogService DialogService
@using System.Text.Json;

<MudContainer Class="welcome-MudContainer">
    <MudText Typo="Typo.h4" Align="Align.Start">Welcome Back</MudText>
    <hr />
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-3">Vehicles Details</MudText>

    <MudTable T="Dictionary<string, object>" ServerData="LoadVehicles" Hover="true">
        <HeaderContent>
            <MudTh>License Plate</MudTh>
            <MudTh>Model</MudTh>
            <MudTh>Owner</MudTh>
            <MudTh>Owner Address</MudTh>
            <MudTh>Owner Contact Number</MudTh>
            <MudTh>Owner Email</MudTh>
            <MudTh>Vehicle Name</MudTh>
            <MudTh>Price</MudTh>
        </HeaderContent>
        <RowTemplate Context="vehicle">
            <MudTd DataLabel="License Plate">@vehicle["licensePlate"]</MudTd>
            <MudTd DataLabel="Model">@vehicle["model"]</MudTd>
            <MudTd DataLabel="Owner">@vehicle["owner"]</MudTd>
            <MudTd DataLabel="Owner Address">@vehicle["ownerAddress"]</MudTd>
            <MudTd DataLabel="Owner Contact Number">@vehicle["ownerContactNumber"]</MudTd>
            <MudTd DataLabel="Owner Email">@vehicle["ownerEmail"]</MudTd>
            <MudTd DataLabel="Vehicle Name">@vehicle["vehicleName"]</MudTd>
            <MudTd DataLabel="Price">@vehicle["price"]</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Color="Color.Error" OnClick="() => DeleteVehicle(vehicle)">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" /> Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private async Task<TableData<Dictionary<string, object>>> LoadVehicles(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var vehicles = await Http.GetFromJsonAsync<List<Dictionary<string, object>>>("https://localhost:7043/api/Logic", cancellationToken);
            return new TableData<Dictionary<string, object>> { Items = vehicles ?? new List<Dictionary<string, object>>(), TotalItems = vehicles?.Count ?? 0 };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching vehicles: {ex.Message}");
            return new TableData<Dictionary<string, object>> { Items = new List<Dictionary<string, object>>(), TotalItems = 0 };
        }
    }

    private async Task DeleteVehicle(Dictionary<string, object> vehicle)
    {
        if (!vehicle.TryGetValue("id", out var idObj) || !TryExtractId(idObj, out int id))
        {
            Console.WriteLine("Error: Invalid or missing ID.");
            return;
        }

        Console.WriteLine($"Extracted ID: {id}");

        bool? confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete the vehicle with ID: {id}?",
            yesText: "Delete", cancelText: "Cancel"
        );

        if (confirmed == true)
        {
            var response = await Http.DeleteAsync($"https://localhost:7043/{id}");


            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Delete failed. Status: {response.StatusCode}");
            }
            else
            {
                await LoadVehicles(new TableState(), CancellationToken.None);
                Console.WriteLine("Vehicle deleted successfully.");
            }
        }
    }
}
